#!/usr/bin/env python
"""
Script para criar dados iniciais do estoque
Cria unidades de medida, ingredientes e alguns movimentos de exemplo
"""
import os
import sys
import django
from decimal import Decimal

# Setup Django
sys.path.append('/home/labdev/Documentos/DjangoProject')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DjangoProject.settings')
django.setup()

from apps.estoque.models import UnidadeMedida, Ingrediente, MovimentoEstoque

def create_unidades_medida():
    """Criar unidades de medida b√°sicas"""
    unidades = [
        ('Quilograma', 'kg'),
        ('Grama', 'g'),
        ('Litro', 'L'),
        ('Mililitro', 'ml'),
        ('Unidade', 'un'),
        ('Pacote', 'pct'),
        ('Lata', 'lata'),
        ('Fatia', 'fatia'),
        ('Colher de sopa', 'csp'),
        ('Colher de ch√°', 'cch'),
    ]
    
    for nome, sigla in unidades:
        unidade, created = UnidadeMedida.objects.get_or_create(
            sigla=sigla,
            defaults={'nome': nome}
        )
        if created:
            print(f"‚úì Criada unidade: {unidade}")
        else:
            print(f"- Unidade j√° existe: {unidade}")

def create_ingredientes():
    """Criar ingredientes b√°sicos para pizzaria"""
    # Buscar unidades de medida
    kg = UnidadeMedida.objects.get(sigla='kg')
    g = UnidadeMedida.objects.get(sigla='g')
    ml = UnidadeMedida.objects.get(sigla='ml')
    un = UnidadeMedida.objects.get(sigla='un')
    pct = UnidadeMedida.objects.get(sigla='pct')
    lata = UnidadeMedida.objects.get(sigla='lata')
    
    ingredientes = [
        # Massas e farinhas
        ('Farinha de Trigo', kg, Decimal('0'), Decimal('5'), Decimal('4.50')),
        ('Fermento Biol√≥gico', g, Decimal('100'), Decimal('50'), Decimal('0.02')),
        ('A√ß√∫car', kg, Decimal('1'), Decimal('2'), Decimal('3.20')),
        ('Sal', kg, Decimal('0.5'), Decimal('1'), Decimal('2.80')),
        ('√ìleo', ml, Decimal('200'), Decimal('500'), Decimal('0.01')),
        
        # Molhos e temperos
        ('Molho de Tomate', lata, Decimal('5'), Decimal('10'), Decimal('3.50')),
        ('Or√©gano', g, Decimal('50'), Decimal('20'), Decimal('0.08')),
        ('Manjeric√£o', g, Decimal('30'), Decimal('20'), Decimal('0.12')),
        ('Alho', kg, Decimal('0.2'), Decimal('0.5'), Decimal('18.00')),
        ('Cebola', kg, Decimal('1.5'), Decimal('2'), Decimal('4.50')),
        
        # Queijos
        ('Mussarela', kg, Decimal('3'), Decimal('2'), Decimal('28.00')),
        ('Queijo Parmes√£o', kg, Decimal('0.5'), Decimal('1'), Decimal('45.00')),
        ('Catupiry', kg, Decimal('1'), Decimal('0.5'), Decimal('35.00')),
        ('Queijo Gorgonzola', kg, Decimal('0.3'), Decimal('0.5'), Decimal('55.00')),
        
        # Carnes
        ('Presunto', kg, Decimal('1.2'), Decimal('1'), Decimal('25.00')),
        ('Pepperoni', kg, Decimal('0.8'), Decimal('0.5'), Decimal('38.00')),
        ('Frango Desfiado', kg, Decimal('2'), Decimal('1'), Decimal('18.00')),
        ('Bacon', kg, Decimal('0.6'), Decimal('0.5'), Decimal('32.00')),
        ('Calabresa', kg, Decimal('1.5'), Decimal('1'), Decimal('22.00')),
        
        # Frutos do mar
        ('Camar√£o', kg, Decimal('0.3'), Decimal('0.5'), Decimal('65.00')),
        ('Atum', lata, Decimal('8'), Decimal('5'), Decimal('8.50')),
        
        # Vegetais
        ('Tomate', kg, Decimal('2'), Decimal('1'), Decimal('6.00')),
        ('Champignon', pct, Decimal('3'), Decimal('2'), Decimal('4.50')),
        ('Azeitona Preta', pct, Decimal('2'), Decimal('1'), Decimal('6.80')),
        ('Azeitona Verde', pct, Decimal('2'), Decimal('1'), Decimal('6.80')),
        ('Piment√£o', kg, Decimal('1'), Decimal('0.5'), Decimal('7.50')),
        ('Milho', lata, Decimal('6'), Decimal('3'), Decimal('3.20')),
        ('Ervilha', lata, Decimal('4'), Decimal('2'), Decimal('3.50')),
        
        # Outros
        ('Ovo', un, Decimal('20'), Decimal('12'), Decimal('0.60')),
        ('Palmito', lata, Decimal('3'), Decimal('2'), Decimal('12.00')),
        ('R√∫cula', pct, Decimal('2'), Decimal('1'), Decimal('3.50')),
    ]
    
    for nome, unidade, estoque, minimo, custo in ingredientes:
        ingrediente, created = Ingrediente.objects.get_or_create(
            nome=nome,
            defaults={
                'unidade_medida': unidade,
                'quantidade_estoque': estoque,
                'estoque_minimo': minimo,
                'custo_unitario': custo,
                'ativo': True
            }
        )
        if created:
            print(f"‚úì Criado ingrediente: {ingrediente}")
        else:
            print(f"- Ingrediente j√° existe: {ingrediente}")

def create_movimentos_exemplo():
    """Criar alguns movimentos de exemplo"""
    # Buscar usu√°rio admin
    try:
        user = get_user_model().objects.filter(is_superuser=True).first()
        if not user:
            print("‚ùå Erro: Nenhum superusu√°rio encontrado. Crie um primeiro.")
            return
    except Exception as e:
        print(f"‚ùå Erro ao buscar usu√°rio: {e}")
        return
    
    # Buscar alguns ingredientes para criar movimentos
    ingredientes = Ingrediente.objects.all()[:5]
    
    movimentos_exemplo = [
        # Entradas (compras)
        (ingredientes[0], 'entrada', Decimal('10'), 'Compra inicial'),
        (ingredientes[1], 'entrada', Decimal('500'), 'Compra inicial'),
        (ingredientes[2], 'entrada', Decimal('5'), 'Compra inicial'),
        
        # Sa√≠das (uso em produtos)
        (ingredientes[0], 'saida', Decimal('2'), 'Produ√ß√£o de pizzas'),
        (ingredientes[1], 'saida', Decimal('50'), 'Produ√ß√£o de pizzas'),
        
        # Ajustes
        (ingredientes[2], 'ajuste', Decimal('0.5'), 'Corre√ß√£o de invent√°rio'),
        
        # Perdas
        (ingredientes[3], 'perda', Decimal('0.1'), 'Produto vencido'),
    ]
    
    for ingrediente, tipo, quantidade, motivo in movimentos_exemplo:
        # Verificar se h√° estoque suficiente para sa√≠das/perdas
        if tipo in ['saida', 'perda'] and ingrediente.quantidade_estoque < quantidade:
            print(f"‚ö†Ô∏è  Pulando movimento {tipo} de {ingrediente.nome}: estoque insuficiente")
            continue
            
        movimento = MovimentoEstoque.objects.create(
            ingrediente=ingrediente,
            tipo=tipo,
            quantidade=quantidade,
            custo_unitario=ingrediente.custo_unitario,
            motivo=motivo,
            usuario=user
        )
        print(f"‚úì Criado movimento: {movimento}")

def main():
    print("üèóÔ∏è  Configurando dados iniciais do estoque...")
    print("\n1. Criando unidades de medida...")
    create_unidades_medida()
    
    print("\n2. Criando ingredientes...")
    create_ingredientes()
    
    print("\n3. Criando movimentos de exemplo...")
    create_movimentos_exemplo()
    
    print("\n‚úÖ Dados iniciais do estoque criados com sucesso!")
    print("\nResumo:")
    print(f"- Unidades de medida: {UnidadeMedida.objects.count()}")
    print(f"- Ingredientes: {Ingrediente.objects.count()}")
    print(f"- Movimentos: {MovimentoEstoque.objects.count()}")
    print(f"- Ingredientes com estoque baixo: {Ingrediente.objects.filter(quantidade_estoque__lte=Decimal('0')).count()}")
    
    print("\nüåê Acesse: http://127.0.0.1:8000/estoque/")

if __name__ == '__main__':
    main()