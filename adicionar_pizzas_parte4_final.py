#!/usr/bin/env python
"""
Script para adicionar a quarta e √∫ltima parte das pizzas fornecidas pelo usu√°rio
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DjangoProject.settings')
django.setup()

from apps.produtos.models import Produto, Categoria, ProdutoPreco, Tamanho
from decimal import Decimal

def adicionar_pizzas_parte4_final():
    """Adicionar quarta e √∫ltima lista de pizzas"""
    
    # Obter categorias
    categoria_salgadas = Categoria.objects.get(nome='Pizzas Salgadas')
    categoria_especiais = Categoria.objects.get(nome='Pizzas Especiais')
    categoria_tradicionais = Categoria.objects.get(nome='Pizzas Tradicionais')
    
    # Obter tamanhos
    tamanhos = {
        'pequena': Tamanho.objects.get(nome='Pequena'),
        'media': Tamanho.objects.get(nome='M√©dia'),
        'grande': Tamanho.objects.get(nome='Grande'),
        'familia': Tamanho.objects.get(nome='Fam√≠lia'),
    }
    
    # Quarta e √∫ltima lista de pizzas do usu√°rio
    pizzas_parte4 = [
        {
            'nome': 'Pizza Palmito',
            'categoria': categoria_salgadas,
            'ingredientes': 'Molho, mussarela, palmito e or√©gano',
            'descricao': 'Sabor cl√°ssico com palmito de primeira qualidade',
            'precos': {'pequena': 30.00, 'media': 35.00, 'grande': 43.00, 'familia': 48.00}
        },
        {
            'nome': 'Pizza Palmito com Milho Verde',
            'categoria': categoria_salgadas,
            'ingredientes': 'Molho, mussarela, palmito, milho verde, tomate e or√©gano',
            'descricao': 'Combina√ß√£o refrescante de palmito com milho doce',
            'precos': {'pequena': 32.00, 'media': 37.00, 'grande': 45.00, 'familia': 50.00}
        },
        {
            'nome': 'Pizza Portuguesa com Palmito',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela, presunto, cebola, vinagrete, milho verde, ovos, palmito, piment√£o e or√©gano',
            'descricao': 'Portuguesa tradicional enriquecida com palmito',
            'precos': {'pequena': 35.00, 'media': 39.00, 'grande': 47.00, 'familia': 55.00}
        },
        {
            'nome': 'Pizza PortuguAtum',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela, vinagrete, milho verde, ovos, atum, cebola e or√©gano',
            'descricao': 'Fus√£o inovadora da portuguesa com atum selecionado',
            'precos': {'pequena': 37.00, 'media': 41.00, 'grande': 48.00, 'familia': 56.00}
        },
        {
            'nome': 'Pizza Provolone com Bacon',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela, provolone, bacon e or√©gano',
            'descricao': 'Sabor intenso do provolone com bacon crocante',
            'precos': {'pequena': 33.00, 'media': 38.00, 'grande': 43.00, 'familia': 47.00}
        },
        {
            'nome': 'Pizza Talentosa',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela, calabresa mo√≠da, frango, cerejas e or√©gano',
            'descricao': 'Cria√ß√£o √∫nica com toque doce das cerejas',
            'precos': {'pequena': 30.00, 'media': 37.00, 'grande': 48.00, 'familia': 57.00}
        },
        {
            'nome': 'Pizza Tomate Seco',
            'categoria': categoria_salgadas,
            'ingredientes': 'Molho, mussarela, tomate seco e or√©gano',
            'descricao': 'Sabor concentrado e especial do tomate seco',
            'precos': {'pequena': 28.00, 'media': 33.00, 'grande': 38.00, 'familia': 45.00}
        },
        {
            'nome': 'Pizza Tomate Seco √† Parmes√£o',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela, tomate seco, parmes√£o e or√©gano',
            'descricao': 'Tomate seco com toque nobre do parmes√£o',
            'precos': {'pequena': 32.00, 'media': 38.00, 'grande': 43.00, 'familia': 52.00}
        },
        {
            'nome': 'Pizza Toscana',
            'categoria': categoria_salgadas,
            'ingredientes': 'Molho, mussarela, calabresa ralada, ovo ralado, cebola e or√©gano',
            'descricao': 'Receita toscana com ovos e calabresa ralada',
            'precos': {'pequena': 30.00, 'media': 36.00, 'grande': 45.00, 'familia': 53.00}
        },
        {
            'nome': 'Pizza Tropical',
            'categoria': categoria_salgadas,
            'ingredientes': 'Molho, mussarela, calabresa, palmito, azeitona sem caro√ßo e or√©gano',
            'descricao': 'Sabores tropicais com calabresa e palmito',
            'precos': {'pequena': 32.00, 'media': 38.00, 'grande': 46.00, 'familia': 53.00}
        },
        {
            'nome': 'Pizza do Cliente',
            'categoria': categoria_especiais,
            'ingredientes': 'Molho, mussarela e at√© 5 ingredientes √† escolha do cliente',
            'descricao': 'Seja o chefe, use sua criatividade e monte sua pizza com at√© 5 ingredientes',
            'precos': {'pequena': 38.00, 'media': 45.00, 'grande': 58.00, 'familia': 70.00}
        }
    ]
    
    # Pizzas que precisam ser atualizadas (j√° existem)
    pizzas_atualizar = [
        {
            'nome': 'Pizza Portuguesa',
            'ingredientes': 'Molho, mussarela, presunto, cebola, vinagrete, milho verde, ovos, piment√£o e or√©gano',
            'descricao': 'Sabor tradicional portugu√™s com ingredientes selecionados',
            'precos': {'pequena': 33.00, 'media': 37.00, 'grande': 45.00, 'familia': 52.00}
        },
        {
            'nome': 'Pizza Vegetariana',
            'ingredientes': 'Molho, mussarela, br√≥colis, palmito, milho, ervilha, tomate e or√©gano',
            'descricao': 'Sele√ß√£o de vegetais frescos e nutritivos',
            'precos': {'pequena': 28.00, 'media': 34.00, 'grande': 40.00, 'familia': 49.00}
        }
    ]
    
    def criar_pizza(pizza_data):
        """Criar nova pizza"""
        try:
            # Verificar se j√° existe
            if Produto.objects.filter(nome=pizza_data['nome']).exists():
                print(f"‚ùå Pizza '{pizza_data['nome']}' j√° existe - pulando")
                return False
            
            # Criar produto
            pizza = Produto.objects.create(
                nome=pizza_data['nome'],
                categoria=pizza_data['categoria'],
                tipo_produto='pizza',
                descricao=pizza_data['descricao'],
                ingredientes=pizza_data['ingredientes'],
                ativo=True
            )
            
            print(f"‚úÖ Pizza '{pizza.nome}' criada!")
            
            # Criar pre√ßos por tamanho
            for tamanho_nome, preco in pizza_data['precos'].items():
                if tamanho_nome in tamanhos:
                    ProdutoPreco.objects.create(
                        produto=pizza,
                        tamanho=tamanhos[tamanho_nome],
                        preco=Decimal(str(preco))
                    )
                    print(f"   - {tamanhos[tamanho_nome].nome}: R$ {preco:.2f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar pizza '{pizza_data['nome']}': {e}")
            return False
    
    def atualizar_pizza(pizza_data):
        """Atualizar pizza existente"""
        try:
            pizza = Produto.objects.get(nome=pizza_data['nome'])
            
            # Atualizar campos
            pizza.ingredientes = pizza_data['ingredientes']
            pizza.descricao = pizza_data['descricao']
            pizza.save()
            
            print(f"üîÑ Pizza '{pizza.nome}' atualizada!")
            
            # Atualizar pre√ßos
            pizza.precos.all().delete()
            
            for tamanho_nome, preco in pizza_data['precos'].items():
                if tamanho_nome in tamanhos:
                    ProdutoPreco.objects.create(
                        produto=pizza,
                        tamanho=tamanhos[tamanho_nome],
                        preco=Decimal(str(preco))
                    )
                    print(f"   - {tamanhos[tamanho_nome].nome}: R$ {preco:.2f}")
            
            return True
            
        except Produto.DoesNotExist:
            print(f"‚ùå Pizza '{pizza_data['nome']}' n√£o encontrada")
            return False
    
    print("üçï ADICIONANDO QUARTA E √öLTIMA PARTE DAS PIZZAS üçï")
    print("=" * 55)
    
    pizzas_criadas = 0
    pizzas_atualizadas = 0
    pizzas_erros = 0
    
    # Atualizar pizzas existentes primeiro
    print("\nüîÑ ATUALIZANDO PIZZAS EXISTENTES:")
    for pizza_data in pizzas_atualizar:
        print(f"\nüìù Atualizando: {pizza_data['nome']}")
        
        if atualizar_pizza(pizza_data):
            pizzas_atualizadas += 1
        else:
            pizzas_erros += 1
    
    # Processar novas pizzas
    print("\n‚úÖ CRIANDO NOVAS PIZZAS:")
    for pizza_data in pizzas_parte4:
        print(f"\nüìù Processando: {pizza_data['nome']}")
        
        if criar_pizza(pizza_data):
            pizzas_criadas += 1
        else:
            pizzas_erros += 1
    
    # Estat√≠sticas finais
    print("\n" + "=" * 55)
    print("üìä RELAT√ìRIO FINAL - PARTE 4 (√öLTIMA)")
    print("=" * 55)
    
    total_pizzas = Produto.objects.filter(tipo_produto='pizza').exclude(nome__icontains='PROMOCIONAL').count()
    total_promocionais = Produto.objects.filter(nome__icontains='PROMOCIONAL').count()
    
    print(f"üîÑ Pizzas atualizadas: {pizzas_atualizadas}")
    print(f"‚úÖ Pizzas criadas: {pizzas_criadas}")
    print(f"‚ùå Erros: {pizzas_erros}")
    print(f"üçï Total de pizzas regulares: {total_pizzas}")
    print(f"üî• Total de pizzas promocionais: {total_promocionais}")
    print(f"üìä TOTAL GERAL NO SISTEMA: {total_pizzas + total_promocionais}")
    
    # Contagem detalhada por categoria
    print("\nüìã DISTRIBUI√á√ÉO FINAL POR CATEGORIA:")
    all_categories = Categoria.objects.all()
    for categoria in all_categories:
        count = Produto.objects.filter(categoria=categoria, tipo_produto='pizza').exclude(nome__icontains='PROMOCIONAL').count()
        if count > 0:
            print(f"   - {categoria.nome}: {count} pizzas")
    
    # Estat√≠sticas de pre√ßos
    print("\nüí∞ FAIXA DE PRE√áOS FINAL:")
    all_pizzas = Produto.objects.filter(tipo_produto='pizza').exclude(nome__icontains='PROMOCIONAL').prefetch_related('precos')
    
    precos_por_tamanho = {'pequena': [], 'media': [], 'grande': [], 'familia': []}
    
    for pizza in all_pizzas:
        for preco in pizza.precos.all():
            tamanho_nome = preco.tamanho.nome.lower()
            if tamanho_nome in precos_por_tamanho:
                precos_por_tamanho[tamanho_nome].append(float(preco.preco))
    
    for tamanho, precos_list in precos_por_tamanho.items():
        if precos_list:
            min_preco = min(precos_list)
            max_preco = max(precos_list)
            print(f"   - {tamanho.capitalize()}: R$ {min_preco:.2f} - R$ {max_preco:.2f}")
    
    print("\n" + "üéâ" * 20)
    print("üçï CARD√ÅPIO DE PIZZAS COMPLETAMENTE FINALIZADO! üçï")
    print("üéâ" * 20)
    print(f"\nüèÜ TOTAL DE {total_pizzas + total_promocionais} PIZZAS CRIADAS COM SUCESSO!")
    print("üìù O sistema est√° pronto para atender todos os clientes!")
    print("üöÄ Pronto para produ√ß√£o!")

if __name__ == '__main__':
    adicionar_pizzas_parte4_final()