#!/usr/bin/env python3
"""
Teste dos fluxos duplos: Pizza Normal vs Pizza Meio a Meio
Verifica se ambas as l√≥gicas coexistem perfeitamente
"""

import os
import re

def validar_fluxo_duplo():
    """Valida se os dois fluxos funcionam independentemente"""
    print("üî• TESTE: Fluxo Duplo - Normal + Meio a Meio")
    print("=" * 60)
    
    arquivo_template = '/home/labdev/Documentos/DjangoProject/templates/pedidos/pedido_rapido.html'
    
    if not os.path.exists(arquivo_template):
        print("‚ùå ERRO: Arquivo de template n√£o encontrado")
        return False
    
    with open(arquivo_template, 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    # Verifica√ß√µes dos dois fluxos
    verificacoes = [
        {
            'nome': 'Detec√ß√£o de modo normal',
            'pattern': r'if \(!this\.primeiroSabor\).*MODO NORMAL',
            'fluxo': 'normal',
            'descri√ß√£o': 'Detecta quando n√£o est√° em modo meio a meio'
        },
        {
            'nome': 'Adi√ß√£o direta ao carrinho',
            'pattern': r'this\.adicionarAoCarrinho\(produto, preco\)',
            'fluxo': 'normal',
            'descri√ß√£o': 'Pizza normal vai direto pro carrinho'
        },
        {
            'nome': 'Return ap√≥s adi√ß√£o normal',
            'pattern': r'this\.adicionarAoCarrinho\(produto, preco\);\s*return;',
            'fluxo': 'normal',
            'descri√ß√£o': 'Evita continuar para l√≥gica meio a meio'
        },
        {
            'nome': 'Detec√ß√£o de modo meio a meio',
            'pattern': r'MODO MEIO A MEIO.*j√° tem primeiro sabor',
            'fluxo': 'meio_a_meio',
            'descri√ß√£o': 'Detecta quando est√° em modo meio a meio'
        },
        {
            'nome': 'Auto-cria√ß√£o por tamanho',
            'pattern': r'primeiroSaborTamanho\?\.tamanho === preco\.tamanho',
            'fluxo': 'meio_a_meio',
            'descri√ß√£o': 'Cria meio a meio autom√°tico com mesmo tamanho'
        },
        {
            'nome': 'Modal para tamanhos diferentes',
            'pattern': r'mostrarModalEscolhaTamanho',
            'fluxo': 'meio_a_meio',
            'descri√ß√£o': 'Abre modal quando tamanhos s√£o diferentes'
        },
        {
            'nome': 'Bot√£o ativar meio a meio',
            'pattern': r'Modo meio a meio ativado',
            'fluxo': 'ativacao',
            'descri√ß√£o': 'Bot√£o ‚ö° ativa modo meio a meio'
        },
        {
            'nome': 'Cancelamento de modo',
            'pattern': r'cancelarMeioAMeio.*primeiroSabor = null',
            'fluxo': 'reset',
            'descri√ß√£o': 'Cancela modo meio a meio volta ao normal'
        },
        {
            'nome': 'Estados visuais por modo',
            'pattern': r'primeiro-sabor-tamanho.*opcao-segundo-tamanho',
            'fluxo': 'visual',
            'descri√ß√£o': 'CSS diferente para cada modo'
        },
        {
            'nome': 'Feedback contextual',
            'pattern': r'clique no tamanho de outra pizza',
            'fluxo': 'ux',
            'descri√ß√£o': 'Mensagens explicativas para cada modo'
        }
    ]
    
    sucessos_normal = 0
    sucessos_meio_a_meio = 0
    sucessos_outros = 0
    total = len(verificacoes)
    
    print("üîç VERIFICANDO FLUXOS INDEPENDENTES:")
    print("-" * 50)
    
    for verificacao in verificacoes:
        if re.search(verificacao['pattern'], conteudo, re.DOTALL):
            print(f"‚úÖ {verificacao['nome']}")
            print(f"   üí° {verificacao['descri√ß√£o']}")
            
            if verificacao['fluxo'] == 'normal':
                sucessos_normal += 1
            elif verificacao['fluxo'] == 'meio_a_meio':
                sucessos_meio_a_meio += 1
            else:
                sucessos_outros += 1
        else:
            print(f"‚ùå {verificacao['nome']}")
            print(f"   üí° {verificacao['descri√ß√£o']}")
    
    print(f"\nüìä RESULTADO POR FLUXO:")
    print(f"   üçï Normal: {sucessos_normal}/3 componentes")
    print(f"   üçïüçï Meio a Meio: {sucessos_meio_a_meio}/3 componentes") 
    print(f"   ‚öôÔ∏è Outros: {sucessos_outros}/4 componentes")
    print(f"   üìà Total: {sucessos_normal + sucessos_meio_a_meio + sucessos_outros}/{total}")
    
    # Verificar cen√°rios de uso
    print("\nüéØ VERIFICANDO CEN√ÅRIOS DE USO:")
    print("-" * 40)
    
    # Cen√°rio 1: Pizza normal
    cenario1_ok = all([
        'MODO NORMAL' in conteudo,
        'this.adicionarAoCarrinho(produto, preco)' in conteudo,
        'return;' in conteudo
    ])
    print(f"{'‚úÖ' if cenario1_ok else '‚ùå'} Cen√°rio 1: Pizza Normal")
    print(f"   üìù Margherita M√©dia ‚Üí Clique ‚Üí Carrinho (1 clique)")
    
    # Cen√°rio 2: Meio a meio r√°pido
    cenario2_ok = all([
        'MODO MEIO A MEIO' in conteudo,
        'criarMeioAMeioAutomatico' in conteudo,
        'primeiroSaborTamanho?.tamanho === preco.tamanho' in conteudo
    ])
    print(f"{'‚úÖ' if cenario2_ok else '‚ùå'} Cen√°rio 2: Meio a Meio R√°pido")
    print(f"   üìù ‚ö° Bot√£o ‚Üí Margherita M√©dia ‚Üí Calabresa M√©dia ‚Üí Carrinho (3 cliques)")
    
    # Cen√°rio 3: Meio a meio com modal
    cenario3_ok = all([
        'mostrarModalEscolhaTamanho' in conteudo,
        'modalSeletorTamanho' in conteudo
    ])
    print(f"{'‚úÖ' if cenario3_ok else '‚ùå'} Cen√°rio 3: Meio a Meio com Modal")
    print(f"   üìù ‚ö° Bot√£o ‚Üí Margherita M√©dia ‚Üí Calabresa Grande ‚Üí Modal ‚Üí Carrinho")
    
    # Cen√°rio 4: Cancelamento e volta ao normal
    cenario4_ok = all([
        'cancelarMeioAMeio' in conteudo,
        'primeiroSabor = null' in conteudo,
        'aguardandoSegundoSabor = false' in conteudo
    ])
    print(f"{'‚úÖ' if cenario4_ok else '‚ùå'} Cen√°rio 4: Cancelamento")
    print(f"   üìù Modo meio a meio ‚Üí Cancelar ‚Üí Volta ao modo normal")
    
    print("\n" + "=" * 60)
    
    if cenario1_ok and cenario2_ok and cenario3_ok and cenario4_ok:
        print("üéâ FLUXO DUPLO IMPLEMENTADO PERFEITAMENTE!")
        print("\nüìã MODOS DE OPERA√á√ÉO:")
        print("   üü¢ MODO NORMAL (padr√£o):")
        print("      ‚Ä¢ Clique na pizza ‚Üí Vai direto pro carrinho")
        print("      ‚Ä¢ Experi√™ncia tradicional e r√°pida")
        print("      ‚Ä¢ Sem estados visuais especiais")
        
        print("\n   üîµ MODO MEIO A MEIO (ativado pelo bot√£o ‚ö°):")
        print("      ‚Ä¢ Primeiro clique ‚Üí Seleciona 1¬∫ sabor")  
        print("      ‚Ä¢ Segundo clique ‚Üí Auto-cria se mesmo tamanho")
        print("      ‚Ä¢ Segundo clique ‚Üí Modal se tamanho diferente")
        print("      ‚Ä¢ Estados visuais claros com cores")
        
        print("\nüéØ EXPERI√äNCIAS POSS√çVEIS:")
        print("   1Ô∏è‚É£ Pizza Inteira: Margherita M√©dia ‚Üí Carrinho (1 clique)")
        print("   2Ô∏è‚É£ Meio a Meio R√°pido: ‚ö° ‚Üí Margherita M√©dia ‚Üí Calabresa M√©dia ‚Üí Carrinho")
        print("   3Ô∏è‚É£ Meio a Meio Modal: ‚ö° ‚Üí Margherita M√©dia ‚Üí Calabresa Grande ‚Üí Modal")
        print("   4Ô∏è‚É£ Cancelar: Modo meio a meio ‚Üí Cancelar ‚Üí Volta ao normal")
        
        print("\nüí° INTELIG√äNCIA:")
        print("   ‚Ä¢ Detecta automaticamente o modo ativo")
        print("   ‚Ä¢ Fluxos independentes e n√£o conflitantes")  
        print("   ‚Ä¢ Experi√™ncia otimizada para cada caso")
        print("   ‚Ä¢ Cancelamento f√°cil e intuitivo")
        
        return True
    else:
        print("‚ùå FLUXO DUPLO INCOMPLETO")
        
        if not cenario1_ok:
            print("   üí° Falta: L√≥gica de pizza normal")
        if not cenario2_ok:
            print("   üí° Falta: Meio a meio autom√°tico")
        if not cenario3_ok:
            print("   üí° Falta: Modal para tamanhos diferentes")
        if not cenario4_ok:
            print("   üí° Falta: Sistema de cancelamento")
        
        return False

if __name__ == '__main__':
    try:
        sucesso = validar_fluxo_duplo()
        print(f"\n{'üöÄ PERFEI√á√ÉO ALCAN√áADA!' if sucesso else 'üîß PRECISA AJUSTAR'}")
    except Exception as e:
        print(f"\nüí• ERRO: {e}")